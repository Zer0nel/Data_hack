# Load the necessary libraries
library(tidyverse) # for data manipulation and visualization
library(keras) # for building deep learning models
library(imager) # for image preprocessing
library(Rtsne) # for feature reduction

# Read the structured data from CSV file
structured_data <- read.csv("structured_data.csv")

# Read the unstructured data (images)
image_files <- list.files("image_folder", pattern = ".jpg", full.names = TRUE)
images <- lapply(image_files, load.image)

# Preprocess the structured data
structured_data <- structured_data %>%
  select(-New_Price) %>% # remove New_Price column since it has many missing values
  mutate(Fuel_Type = as.factor(Fuel_Type), # convert categorical variables to factors
         Transmission = as.factor(Transmission),
         Owner_Type = as.factor(Owner_Type)) %>%
  mutate_if(is.character, as.factor) %>% # convert character variables to factors
  mutate_if(is.factor, as.numeric) %>% # convert factors to numeric
  mutate_if(is.numeric, scale) # standardize numeric variables

# Preprocess the unstructured data (images)
# Extract features from images using pre-trained VGG16 model
vgg_model <- application_vgg16(include_top = FALSE, input_shape = c(224, 224, 3))
image_features <- lapply(images, function(x) predict(vgg_model, array_reshape(imager::imresize(x, c(224, 224)), c(1, 224, 224, 3)), batch_size = 1))
image_features <- lapply(image_features, function(x) k_reshape(x, c(1, dim(x)[[2]])))
image_features <- lapply(image_features, function(x) k_flatten(x))

# Reduce the dimensionality of the image features using t-SNE
tsne_features <- Rtsne::Rtsne(do.call(rbind, image_features), perplexity = 30)$Y

# Combine the structured and unstructured features
combined_features <- cbind(structured_data, tsne_features)

# Split the data into training and testing sets
train_index <- sample(nrow(combined_features), size = 0.8 * nrow(combined_features))
train_data <- combined_features[train_index, ]
test_data <- combined_features[-train_index, ]

# Define the model architecture
model <- keras_model_sequential() %>%
  layer_dense(units = 32, activation = "relu", input_shape = c(13, 2)) %>%
  layer_dropout(rate = 0.3) %>%
  layer_dense(units = 16, activation = "relu") %>%
  layer_dropout(rate = 0.3) %>%
  layer_dense(units = 1, activation = "linear")

# Compile the model
model %>% compile(
  optimizer = "adam",
  loss = "mse",
  metrics = list("mae")
)

# Train the model
history <- model %>% fit(
  x = list(train_data[, 1:13], train_data[, 14:15]),
  y = train_data[, 16],
  epochs = 100,
  batch_size = 32,
  validation_split = 0.2,
  callbacks = list(early_stopping(patience = 5))
)

# Evaluate the model
model %>% evaluate(
  x = list(test_data[, 1:13], test_data[, 14:15]),
  y = test_data[, 16]
)

# Make predictions on new data
new_data <- data.frame(
  Name = "Toyota Corolla",
  Location = "Mumbai",
  Year = 2017,
  Kilometers_Driven = 25000,
  Fuel_Type = "Petrol",
  Transmission = "Manual",
  Owner_Type = "First",
  Mileage = 18.0,
  Engine = 1197,
  Power = 82,
  Seats = 5
)

# Preprocess the structured data for the new data point
new_data <- new_data %>%
  select(-New_Price) %>%
  mutate(Fuel_Type = as.factor(Fuel_Type),
         Transmission = as.factor(Transmission),
         Owner_Type = as.factor(Owner_Type)) %>%
  mutate_if(is.character, as.factor) %>%
  mutate_if(is.factor, as.numeric) %>%
  mutate_if(is.numeric, scale)

# Extract features from the new data point's image
new_image <- load.image("new_image.jpg")
new_image_feature <- predict(vgg_model, array_reshape(imager::imresize(new_image, c(224, 224)), c(1, 224, 224, 3)), batch_size = 1)
new_image_feature <- k_reshape(new_image_feature, c(1, dim(new_image_feature)[[2]]))
new_image_feature <- k_flatten(new_image_feature)

# Reduce the dimensionality of the image feature using t-SNE
new_image_tsne_feature <- Rtsne::Rtsne(rbind(image_features, new_image_feature), perplexity = 30)$Y[nrow(image_features) + 1, ]

# Combine the structured and unstructured features for the new data point
new_combined_features <- cbind(new_data, new_image_tsne_feature)

# Make prediction using the trained model
new_price <- model %>% predict(list(new_combined_features[, 1:13], new_combined_features[, 14:15]))
new_price
